{{- define "golang.test.pkg" -}}

{{- $profile_dir := var.profile_dir | default "build/test-profile" -}}
{{- $pkg := matrix.pkg | default "" -}}
{{- $cover_pkg := var.cover_pkg | default (printf "./%s" $pkg) -}}

path: ./{{ $pkg }}
verbose: true
panic_on_exit_0: true

{{- if $pkg }}
json_output_file: {{ $profile_dir -}}/result-{{ $pkg | strings.KebabCase }}.json
{{- else }}
json_output_file: {{ $profile_dir -}}/result.json
{{- end }}

profile:
  output_dir: {{ $profile_dir }}
  coverage:
    enabled: true

    {{- if $pkg }}
    output: coverage.{{ $pkg | strings.KebabCase }}.txt
    {{- else }}
    output: coverage.txt
    {{- end }}

    packages:
    - {{ $cover_pkg }}

  memory:
    enabled: true

    {{- if $pkg }}
    output: memory.{{ $pkg | strings.KebabCase }}.out
    {{- else }}
    output: memory.out
    {{- end }}

  cpu:
    enabled: true

    {{- if $pkg }}
    output: cpu.{{ $pkg | strings.KebabCase }}.out
    {{- else }}
    output: cpu.out
    {{- end }}

  mutex:
    enabled: true

    {{- if $pkg }}
    output: mutex.{{ $pkg | strings.KebabCase }}.out
    {{- else }}
    output: mutex.out
    {{- end }}

  block:
    enabled: true

    {{- if $pkg }}
    output: block.{{ $pkg | strings.KebabCase }}.out
    {{- else }}
    output: block.out
    {{- end }}

  trace:
    enabled: true

    {{- if $pkg }}
    output: trace.{{ $pkg | strings.KebabCase }}.out
    {{- else }}
    output: trace.out
    {{- end }}

{{- end -}}
