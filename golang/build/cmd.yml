{{- define "golang.build.cmd" -}}

{{- $module_name := var.module_name -}}
{{- if not $module_name -}}
  {{- $module_name = eval.Shell "go list -m || true"
      | strings.TrimSpace
      | strings.TrimPrefix "command-line-arguments"
  -}}
{{- end -}}

{{- $module_name = $module_name | default "." -}}

{{- $kernel := matrix.kernel | default host.Kernel | default "linux" -}}
{{- $arch := matrix.arch | default host.Arch | default "amd64" -}}

{{- $suffix := "" -}}
{{- if eq $kernel "windows" -}}
  {{- $suffix = ".exe" -}}
{{- end -}}

{{- $output_dir := var.output_dir | default "build" -}}
{{- $cmd := var.cmd | default matrix.cmd | default "" -}}

path: ./cmd/{{ $cmd }}

ldflags:
- -s -w
- -X "{{- $module_name -}}/pkg/version.branch={{- env.GIT_BRANCH -}}"
- -X "{{- $module_name -}}/pkg/version.commit={{- env.GIT_COMMIT -}}"
- -X "{{- $module_name -}}/pkg/version.tag={{- env.GIT_TAG -}}"
- -X "{{- $module_name -}}/pkg/version.arch={{- $arch -}}"
- -X "{{- $module_name -}}/pkg/version.worktreeClean={{- env.GIT_WORKTREE_CLEAN -}}"
- -X "{{- $module_name -}}/pkg/version.buildTime={{ now.UTC.Format "2006-01-02T15:04:05Z07:00" }}"
# TODO
# - -X "{{- $module_name -}}/pkg/version.goCompilerPlatform=$(go version | cut -d\  -f4)"

outputs:
  {{- if and (eq $kernel host.Kernel) (eq $arch host.Arch) }}
- {{ filepath.Join $output_dir (printf "%s%s" $cmd $suffix) }}
  {{- end }}
- {{ filepath.Join $output_dir (printf "%s.%s.%s%s" $cmd $kernel $arch $suffix) }}

{{- end -}}
