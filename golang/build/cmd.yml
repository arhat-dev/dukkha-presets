# Build executables `${OUTPUT_DIR}/{{ matrix.cmd }}.{{ matrix.kernel }}.{{ matrix.arch }}`
# from ./cmd/{{ matrix.cmd }}

# Required Env: MODULE_NAME
# Required matrix vector names: cmd, kernel, arch
# Optional Env: OUTPUT_DIR

path@template: ./cmd/{{- matrix.cmd -}}
tags:
- netgo
- osusergo
- timetzdata

ldflags@template:
- -s -w
- -X "{{- env.MODULE_NAME -}}/pkg/version.branch={{- env.GIT_BRANCH -}}"
- -X "{{- env.MODULE_NAME -}}/pkg/version.commit={{- env.GIT_COMMIT -}}"
- -X "{{- env.MODULE_NAME -}}/pkg/version.tag={{- env.GIT_TAG -}}"
- -X "{{- env.MODULE_NAME -}}/pkg/version.arch={{- matrix.arch -}}"
- -X "{{- env.MODULE_NAME -}}/pkg/version.workspaceClean={{- env.GIT_WORKTREE_CLEAN -}}"
- -X "{{- env.MODULE_NAME -}}/pkg/version.buildTime={{ now.UTC.Format "2006-01-02T15:04:05Z07:00" }}"
# TODO
# - -X "{{- env.MODULE_NAME -}}/pkg/version.goCompilerPlatform=$(go version | cut -d\  -f4)"

outputs@template: |-
  {{- $suffix := "" -}}
  {{- if eq matrix.kernel "windows" -}}
    {{- $suffix = ".exe" -}}
  {{- end -}}

  {{- $output_dir := env.OUTPUT_DIR | default "build" -}}

  {{- if and (eq matrix.kernel env.HOST_KERNEL) (eq matrix.arch env.HOST_ARCH) }}
  - {{ filepath.Join $output_dir (printf "%s%s" matrix.cmd $suffix) }}
  {{- end }}
  - {{ filepath.Join $output_dir (printf "%s.%s.%s%s" matrix.cmd matrix.kernel matrix.arch $suffix) }}

extra_args:
- -buildmode=exe
- -mod=vendor
- -trimpath
