global:
  values:
    golang:
      version: "1.18"

tools:
  golang:
  - name: local
  - name: in-ctr
    cmd@tmpl#use-spec:
      template: |-
        {{- include "golang.cmd.ctr" . -}}
      include:
      - text@presets?str: templates/image/flavored-tag.tmpl
      - text@presets?str: golang/cmd/ctr.tmpl

      variables:
        # version@tlang?str: values.golang.version
        flavor@env: ${FLAVOR}
        volume: dukkha-preset
        workdir@tlang: fs.Join dukkha.WorkDir "golang" "testdata"
        run_ctr@env: ${RUN_CTR}

# we are using virtual key for task (which is a inline map in dukkha)
# so there should be a rendering suffix `@` note, but does nothing
golang:build:
# define task name
- name: dukkha-preset
  matrix@!:
    value@tmpl|presets: |-
      matrix/golang/{{- values.golang.version -}}/common.yml
    select: |-
      .include.[].cmd = ["dukkha-preset", "foo"] | .cmd = ["dukkha-preset", "foo"]

  __@tmpl#use-spec:
    template: |-
      {{- include "golang.build.cmd" . -}}
    include:
    - text@presets?str: golang/build/cmd.tmpl
    variables:
      module_name: arhat.dev/dukkha-preset
  chdir: golang/testdata

golang:test:
- name: dukkha-preset-pkg
  env:
  - name: PROFILE_DIR
    value: golang/testdata/build/test-profile
  matrix:
    pkg@tlang: |-
        (eval.Shell "cd golang/testdata && go list ./...").Stdout
          | removePrefix
              ((eval.Shell "cd golang/testdata && go list -m").Stdout | strings.TrimSpace)
          | removePrefix "/"
          | addPrefix "- "
  hooks:
    before:
    - shell: tmpl:mkdir -p ${PROFILE_DIR}

  __@tmpl#use-spec:
    template: |-
      {{- include "golang.test.pkg" . -}}
    include:
    - text@presets?str: golang/test/pkg.tmpl

  chdir: golang/testdata

workflow:run:
- name: test-golang
  env:
  - name: PRESET
    value: golang
  jobs:
  - task:
      ref: golang:build(dukkha-preset)
      matrix_filter: {}

  - shell: &inspect_build_artifacts |-
      ls -alh golang/testdata/build || true
      rm -rf golang/testdata/build || true

  - name: golang:in-ctr:build
    if@tlang: &is_linux_or_darwin eq host.kernel "linux" "darwin"
    task:
      ref: golang:in-ctr:build(dukkha-preset)
      matrix_filter:
        kernel:
        - __@env: ${HOST_KERNEL}
    next@tlang: if not values.golang.in_ctr.done; `golang:in-ctr:build`; end
    env: &ctr_env
    - name: FLAVOR
      value: native
    - name: lima_instance
      value@presets|tmpl: templates/first-active-lima-instance.tmpl
    - name: RUN_CTR
      value@presets?str|shell?str: scripts/test/enumerate-run-ctr.sh

  - shell: *inspect_build_artifacts
    if@tlang: *is_linux_or_darwin

  - task:
      ref: golang:test(dukkha-preset-pkg)
      matrix_filter: {}

  - shell: &inspect_test_profile |-
      ls -alh golang/testdata/build/test-profile
      rm -rf golang/testdata/build/test-profile

  - name: golang:in-ctr:test
    if@tlang: *is_linux_or_darwin
    task:
      ref: golang:in-ctr:test(dukkha-preset-pkg)
      matrix_filter: {}
    next@tmpl: if not values.golang.in_ctr.done; `golang:in-ctr:test` ; end
    env: *ctr_env

  - shell: *inspect_test_profile
    if@tlang: *is_linux_or_darwin
