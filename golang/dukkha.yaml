# This is the sample config to use golang recipes
renderers:
  env:
    enable_exec: true

tools:
  golang:
  - name: local
    env:
    - name: GO_VERSION
      value@template: |-
        {{- $parts := eval.Shell "go version" | strings.Split " " -}}
        {{- $parts = index $parts 2 | trimPrefix "go" | strings.Split "." -}}
        {{- index $parts 0 -}}.{{- index $parts 1 -}}

  - name: in-ctr
    cmd@file|template: golang/cmd-in-ctr.yml
    env:
    # - name: lima_instance
    #   value@file|template: templates/first-active-lima-instance.tpl
    # - name: RUN_CTR
    #   value@env: ${RUN_CTR:-"limactl shell ${lima_instance} sudo nerdctl run --rm --privileged"}
    - name: VOLUME
      value: dukkha-preset
    - name: GO_VERSION
      value: "1.17"
    # - name: IMAGE_FLAVOR
    #   value: debian-cross
    - name: WORKING_DIR
      value@template: |-
        {{- filepath.Join env.DUKKHA_WORKING_DIR "golang" "testdata" -}}

# we are using virtual key for task (which is a inline map in dukkha)
# so there should be a rendering suffix `@` note, but does nothing
golang:build:
# define task name
- name: dukkha-preset
  __@file: golang/build/cmd.yml
  # set env required by golang/build/cmd.yml
  env:
  - name: MODULE_NAME
    value: arhat.dev/dukkha-preset
  # set matrix vectors (cmd, kernel, arch), as required by golang/build/cmd.yml
  matrix@:
    cmd:
    - dukkha-preset
    - foo
    __@!:
      value@template|file: |-
        matrix/golang/{{- env.GO_VERSION -}}/common.yml
      select: |-
        .include.[].cmd = ["dukkha-preset", "foo"]
  cgo:
    enabled: true
  chdir: golang/testdata

golang:test:
- name: dukkha-preset-pkg
  __@file: golang/test/pkg.yml
  env:
  - name: PROFILE_DIR
    value: golang/testdata/build/test-profile
  matrix:
    pkg@template: |-
      {{-
        eval.Shell "cd golang/testdata && go list ./..."
        | removePrefix
          (eval.Shell "cd golang/testdata && go list -m" | trimSuffix "\n")
        | addPrefix "- "
      -}}
  hooks:
    before:
    - shell: mkdir -p ${PROFILE_DIR}
  chdir: golang/testdata

workflow:run:
- name: test-golang
  env:
  - name: PRESET
    value: golang
  jobs:
  - task: golang:build(dukkha-preset, {})
  - shell: &inspect_build_artifacts |-
      ls -alh golang/testdata/build || true
      rm -rf golang/testdata/build || true

  - name: golang:in-ctr:build
    task: |-
      golang:in-ctr:build(dukkha-preset, { kernel: [linux] })
    next@template: |-
      {{- if not values.golang.in_ctr.done -}}
        golang:in-ctr:build
      {{- end -}}
    env: &ctr_env
    - name: lima_instance
      value@file|template: templates/first-active-lima-instance.tpl
    - name: IMAGE_FLAVOR
      value: native
    - name: RUN_CTR
      value@file?str|shell?str: templates/enumerate-docker-cli.sh

  - shell: *inspect_build_artifacts

  - task: golang:test(dukkha-preset-pkg, {})
  - shell: &inspect_test_profile |-
      ls -alh golang/testdata/build/test-profile
      rm -rf golang/testdata/build/test-profile

  - name: golang:in-ctr:test
    task: |-
      golang:in-ctr:test(dukkha-preset-pkg, {})
    next@template: |-
      {{- if not values.golang.in_ctr.done -}}
        golang:in-ctr:test
      {{- end -}}
    env: *ctr_env

  - shell: *inspect_test_profile
